server:
  log_level: info # CHANGEME or leave as default info

metrics:
  wal_directory: C:\ProgramData\grafana-agent\wal
  global:
    scrape_interval: 60s
    # Metrics external labels, which are a static set of labels we attach to EVERY metric
    #-----------------------------------------------------------------------------------------------
    external_labels:
      owner: {{ .Metrics.Global.ExternalLabels.Owner }}
      team: {{ .Metrics.Global.ExternalLabels.Team }}
      dept: {{ .Metrics.Global.ExternalLabels.Dept }}
      env: {{ .Metrics.Global.ExternalLabels.Env }}
      app: {{ .Metrics.Global.ExternalLabels.App }}
      subscription: {{ .Metrics.Global.ExternalLabels.Subscription }}
      datacenter: {{ .Metrics.Global.ExternalLabels.Datacenter }}
      silence: {{ .Metrics.Global.ExternalLabels.Silence }}
      los: {{ .Metrics.Global.ExternalLabels.Los }}
      supporttier: {{ .Metrics.Global.ExternalLabels.SupportTier }}
      virtual: {{ .Metrics.Global.ExternalLabels.Virtual }}

  configs:
    # This config uses two - url blocks to perform two seperate actions
    # The first - url block uses a write_relabel_configs: block to 
    # keep only metrics prefixed with node_ and windows_ but none that are windows_service_ or windows_process_
    # The second - url block uses a write_relabel_configs: block to
    # keep only metrics prefixed with windows_process_ and windows_service_
    #----------------------------------------------------------------------------------------------- 
    - name: windows_node_metrics-middle-server
      remote_write:
        - url: {{ .TemplateData.CPUMemDiskHopURL }} # http://azr-v-grafana02.example.net:12345/agent/api/v1/metrics/instance/cpu-mem-disk/write
          write_relabel_configs:
            - action: keep
              source_labels: [__name__]
              separator: ;
              regex: ^(node|windows)_.+$
            - action: drop
              source_labels: [__name__]
              separator: ;
              regex: ^windows_(?:service|process)_.+$
        - url: {{ .TemplateData.ServiceProcessHopURL }} # http://azr-v-grafana02.example.net:12345/agent/api/v1/metrics/instance/service-process/write
          write_relabel_configs:
            - action: keep
              source_labels: [__name__]
              separator: ;
              regex: ^windows_(?:service|process)_.+$        
      scrape_configs: []

    # This config will keep only metrics that are prefixed with agent_ 
    # The metrics are then sent to the middle-server running a Grafana agent to a
    # URL that is specific to each "instance" which is service-process in the config below
    #----------------------------------------------------------------------------------------------- 
    - name: agent-metrics-middle-server
      remote_write:
        - url: {{ .TemplateData.AgentHopURL }} # http://azr-v-grafana02.example.net:12345/agent/api/v1/metrics/instance/agent/write
          write_relabel_configs:
            - action: keep
              source_labels: [__name__]
              separator: ;
              regex: ^agent_.+$
      scrape_configs: []

logs:
  positions_directory: C:\ProgramData\grafana-agent\promtail-positions
  configs:
  {{ range .Logs.Configs }}
  - name: {{ .Name }} #main is default
    clients:
    {{ range .Clients }}
      - url: {{ .URL }} # http://azr-v-grafana02.example.net:3500/loki/api/v1/push
        tls_config:
          insecure_skip_verify: true
        external_labels:
          owner: {{ .ExternalLabels.Owner }}
          team: {{ .ExternalLabels.Team }}
          dept: {{ .ExternalLabels.Dept }}
          env: {{ .ExternalLabels.Env }}
          app: {{ .ExternalLabels.App }}
          subscription: {{ .ExternalLabels.Subscription }}
          datacenter: {{ .ExternalLabels.Datacenter }}
          silence: {{ .ExternalLabels.Silence }}
          los: {{ .ExternalLabels.Los }}
          supporttier: {{ .ExternalLabels.SupportTier }}
          virtual: {{ .ExternalLabels.Virtual }}
    {{ end }}
  {{ end }}
    scrape_configs:
    - job_name: windows-application
      windows_events:
        eventlog_name: Application
        use_incoming_timestamp: true
        bookmark_path: C:\ProgramData\grafana-agent\bookmark-application.xml
        exclude_event_data: true
        locale: 1033 # We manually set the local but it is not typically necessary
        labels: {}

    # This job captures System event logs from Windows
    - job_name: windows-system
      windows_events:
        eventlog_name: System
        use_incoming_timestamp: true
        bookmark_path: C:\ProgramData\grafana-agent\bookmark-system.xml
        exclude_event_data: true
        locale: 1033 # We manually set the local but it is not typically necessary
        labels: {}

    # # this is an example of taking an application log from an arbitrary location    
    # - job_name: CHANGEME
    #   static_configs:
    #   - target: 
    #     - localhost
    #     labels:
    #       __path__: /path/to/application/logfiles.log # CHANGEME can also use a glob i.e. /path/to/logsdir/logs.* and more

integrations:
  metrics:
    autoscrape:
      enable: true

  # The windows_exporter provides windows server metrics and data
  windows:
    autoscrape:
      metrics_instance: windows_node_metrics-middle-server
      relabel_configs:
        # strip the port from instance and assign as a label
        - source_labels: [instance]
          target_label: port
          regex: .+:([0-9]+).*
          replacement: $1
        # assign the instance label without the port 
        - source_labels: [instance]
          target_label: instance
          regex: ([^:\/]+)(:[0-9]+)?
          replacement: $1
    # These enabled_collectors include the default one but can also include additional ones
    # We additionally enable: process,service,time,logon
    enabled_collectors: cpu,cs,logical_disk,net,os,system,textfile,process,service,time,logon
    
  # The agent integration provides useful information on the actual agent installed
  agent:
    autoscrape:
      metrics_instance: agent-metrics-middle-server
      relabel_configs:
        # strip the port from instance and assign as a label
        - source_labels: [instance]
          target_label: port
          regex: .+:([0-9]+).*
          replacement: $1
        # assign the instance label without the port 
        - source_labels: [instance]
          target_label: instance
          regex: ([^:\/]+)(:[0-9]+)?
          replacement: $1